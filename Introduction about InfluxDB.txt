Introduction about InfluxDB
Time series databases are often used in computer room operation and maintenance monitoring, IoT device collection and storage, Internet advertisement click analysis and other application scenarios based on timelines and multi-source data continuously pouring into data platforms. InfluxDB is designed for time series data storage, especially in Intelligent manufacturing in the industrial field has huge application potential in the future.
1. Characteristics of time series data
The application scenario of time series data is that data will flow in from multiple data sources at each time point on the timeline, generate a large amount of data according to various latitudes of continuous time, and write it into storage in real-time calculated in seconds or even milliseconds.
The traditional RDBMS database supports writing by row, and establishes the index of the B-tree structure. It is not designed for batch high-speed writing, especially when multi-latitude time series data is continuously poured into the data platform, the storage of RDBMS The engine will inevitably lead to extremely unsuitable load and throughput in terms of write performance.
Therefore, the storage design of time series data generally does not consider traditional RDBMS, and will focus on the storage direction of LSM-Tree and columnar data structures.
The LSM data model is a layer-by-layer compression of batch data from memory to disk files. Some of the data are arranged in KV order to form a column cluster to store files, such as HBase, Cassandra; some are stored by column fields corresponding to multiple files, forming a columnar format storage, which can greatly improve the compression ratio.
2. InfluxDB data model
InfluxDB's data storage theoretical system refers to the LSM-Tree data model of HBase, and establishes a set of storage architecture suitable for time series data, called TSM.
HBase's data model mechanism, appends WAL, establishes a batch-written data buffer MemStore in memory, and flushes (Flush) the MemStore to the disk StoreFile periodically or when it is full. Record deduplication.
This data model based on the LSM-Tree structure can greatly improve the performance of writing, as is the case with many NoSQL systems.
InfluxDB is no exception. Continuing this LSM-Tree structure, WAL is added first when time series data is written, then written to the Cache, and then flushed to the disk TSM file periodically or when it is full.
The difference between it and HBase is mainly in the design of the data structure. The MemStore of HBase directly encapsulates the written data into K/V and then forms larger chunks.
The biggest feature of this structure is that HBase sequentially arranges and encapsulates atomic units (K/V) into larger chunks in a near-universal manner. The data is designed very loosely, and random search does not depend on data. Structural optimization, but rely on index-based scans.
However, InfluxDB re-optimized the structure in the Cache. We can see that it is a structure of Map and Map and then List. The first layer of Map is the series (Series) collection, and the Series is the data source defined by InfluxDB (table measurement + multi-label tagset). ), the second layer Map is a collection of indicators, InfluxDB defines indicators as Fields, and the third layer is a timeline record list of an indicator of a data source.
InfluxDB firstly re-adjusts the data structure according to the characteristics of time series data to meet the needs of such time series characteristics, then there is a data source as an index to locate indicators, and indicators as an index to locate the data list on the timeline .
InfluxDB in-memory Cache will be flushed to TSM file, and TSM file will also establish data block arrangement and index block arrangement of disk file according to the above structure. Each data block can be composed of Timestamps list and Values ​​list respectively.
Then the TimeStamps list can be compressed separately (delta-delta encoding), and the Values ​​list has the same type Type, which can be compressed according to Type. The index block establishes the relationship between the data block and the Series, and quickly locates the data block displacement of the data to be checked by means of binary search on the time range.
3. InfluxDB Index
InfluxDb is divided into two kinds of indexes, one is the built-in Series index of the TSM file, and the other is the inverted index.
Series index: In the built-in index of InfluxDB, Series + field is the primary key, which locates an index block of an indicator. The index block consists of N index entities. Each index entity provides the minimum time and the maximum time, as well as the time range. Corresponds to the offset of the Series data block of the TSM file. The TSM file consists of multiple Series data blocks. Each Series data block contains a time list (Timestamps), and the minimum time and maximum time of the index entity correspond to this time list. . Therefore, Series index blocks can be sorted by Key, and binary search can be performed by time range. First, quickly locate the time series data in a certain time range, and then perform scan matching.
Inverted index: InfluxDB has TSI structure in addition to TSM structure. TSI is mainly used for inverted index of time series data. Alternatively, you can query the indicators of the data area of ​​all computer rooms by using the dynamic ring detection-data area as the condition.
The data structure of TSI is as follows: The first layer is the set of label names, the second layer is the set of all labels under a certain label name, for example: the label name is area, which contains label values ​​such as data area and calculation area, and the third layer It is the data source corresponding to a specific label. For example, the data source containing the label of the data area includes dynamic detection - high-tech zone - data center, dynamic detection - Xixian New District - data center and so on.
Through this indexing method, all data sources containing this label can be quickly indexed by label. Through the Series of the data source, and then search by other conditions from the TSM file.
The TSI data model uses the same routine as TSM, which is essentially based on the LSM data structure. Along with data writing, the inverted index first writes WAL, and then writes the memory In-Memory Index. When the memory threshold is reached, Flush dumps the TSI file. , and the TSI file is the inverted index file of the disk-based Disk-Based Index, which contains the Series block and the label block. You can find all the corresponding Series in the Series block through the label value in the label block.
The time series library will be very efficient in this kind of analysis query classified by data source tags (Tag), which is why InfluxDB fully responds to the needs of time series data services.
4. Distributed
InfluxDB is more inclined to decentralized distribution, InfluxDB is closer to Cassandra, Cassandra is a decentralized distributed architecture, and InfluxDB includes Meta node and Data node, but Meta node seems to be the master node, but its function It is very weak. It mainly stores some public information and continuous query scheduling. The problem of data reading and writing is mainly concentrated on the Data nodes, and the reading and writing between Data nodes is closer to the decentralized way.
InfluxDB is an AP distributed system in the CAP theorem, very focused on high availability, not consistency. Secondly, InfluxDB is mainly two-level sharding, the first level is ShardGroup, and the second level is Shard.
InfluxDB is eventual consistency. It implements various adjustment strategies Any, One, Quorum, and All in terms of write consistency, which is exactly the same as Cassandra, and strengthens the temporary queue persistence effect of Hinted handoff of the coordination node. availability.
InfluxDB is very weak in the deletion problem. It only allows deletion of a range set or a dimension set under a Series. This is also due to the design of this time series structure. Deleting a single point will be very troublesome and costly.
5. Summary
First of all, the emergence of Influxdb greatly reduces the storage volume of time series data, which is extremely beneficial to the data storage problem in the Internet of Things era. The key is to design a reasonable storage structure. On the one hand, it can reduce the amount of data redundancy. Specific compression algorithms, such as: delta-delta compression algorithm for high compression of timestamp collections in TSM files;
Secondly, in the face of time-based storage, it was difficult to find a suitable solution before. For example, we use Elasticsearch to build a date index to save logs, but we are always entangled on what conditions to create and when to destroy. It takes a lot of effort at the coding level, but Influxdb's retention policy and partition grouping solve this problem very well;
Finally, the index establishment of a more suitable time series model, especially the inverted index TSI, is very efficient to achieve data capture, aggregation and analysis according to a certain latitude within a period of time, which is precisely the core of time series application scenarios. It can greatly improve the application efficiency of the overall computing resources.